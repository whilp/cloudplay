#!/usr/bin/env python

import json
import logging
import sys

import requests

from collections import namedtuple
from itertools import chain

from urllib import urlencode
from urlparse import urljoin

OFFICIALFM_ID = 'IvU9WMP8r3l3n5CJYgf3'

log = logging.getLogger(__name__)

def main():
    log.level = logging.DEBUG
    log.addHandler(logging.StreamHandler())

    client = SoundCloud()
    client.session = requests.session()
    client.get = client.session.get

    user = "lt_kije"
    tracks = (user.tracks for user in client.users(user).followings)

Track = namedtuple('Track', 'location creator title')

class SoundCloud(object):
    url = 'https://api.soundcloud.com/'
    client_id = 'bed25dba5cb38c07ca8d5bb9d92eb0a8'
    limit = 200
    format = 'json'

    def users(self, user):
        return SoundCloudUser(user=user, client=self)

    get = requests.get

    def list(self, collection, **query):
        url = urljoin(self.url, collection)
        params = dict(
            client_id=self.client_id,
            format=self.format,
            limit=self.limit,
            offset = 0,
            )
        params.update(query)
        
        url = urljoin(self.url, collection)

        while True:
            requrl = url + '?' + urlencode(params)
            log.debug('GET %s', requrl)
            response = self.get(requrl)
            items = json.loads(response.text)
            params['offset'] += len(items)
            log.debug('received %d items', len(items))
            if not items:
                return
            for item in items:
                yield item

class SoundCloudUser(object):

    def __init__(self, user=None, client=None, **kwargs):
        self.user = user
        self.client = client

    @property
    def tracks(self):
        resource = "/users/{user}/tracks".format(user=self.user)
        for track in self.client.list(resource):
            yield Track(
                title=track["title"],
                creator=track["user"]["username"],
                location=track["stream_url"])

    @property
    def followings(self):
        resource = "/users/{user}/followings".format(user=self.user)
        for user in self.client.list(resource):
            yield SoundCloudUser(user=user["username"], client=self.client)

main()
